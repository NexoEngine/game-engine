Epitech STRASBOURG                                                 Mehdy Morvan
Request for Comments: 0001                                       Guillaume Hein
Category: Informational                                             Rémi MERGEN
                                                                  Jean Cardonne
                                                  Nathan De Balthasar de Gachéo
                                                               Alex Di Venanzio

                                                                  December 2023
                            R-TYPE Server Protocols

Status of this Memo

    This memo details the protocols used in the R-TYPE Server, a project
    developed by students at EPITECH This document is for informational
    purposes and may be distributed freely.

Table of Contents

    1.  Introduction...................................................1
    2.  R-TYPE Server Architecture.....................................1
    3.  R-TYPE Server TCP Protocol.....................................1
    3a. Package Structure..............................................1
    3b. Server Connection..............................................1
    4.  R-TYPE Server UDP Protocol.....................................1
    4a. Package Structure..............................................1
    4b. Input Communication............................................1

DI VENANZIO                     Informational                          [Page 1]

RFC 0001                         Instruction                      December 2023

1. Introduction

    This document describes the architecture and protocols used in the R-TYPE
    Server, inspired by the R-Type game, focusing on multiplayer online
    functionality. The server uses both TCP and UDP protocols for
    communication, ensuring efficient and reliable data transfer.

2. R-TYPE Server Architecture

    The server employs a client-server model, managing multiple game rooms.
    The architecture supports scalable multiplayer interactions, with the
    server handling game logic, room management, and player sessions.
    Key components include the game engine for physics and entity management,
    and a networking layer for client-server communication.

3. R-TYPE Server TCP Protocol

    The server uses TCP for establishing connections with clients and initial
    handshaking. The TCP packet, defined as 'TCPPacket', contains fields for
    a magic number, a command, and client identification data. This protocol
    ensures reliable client-server communication for initial setup and
    critical game information.

    Note: Currently, our packets do not include a checksum for data
    verification.

3a. Package Structure

    TCP packets include headers with packet length and type. Custom fields
    include client ID, room details, and server response codes. These packets
    facilitate initial client-server interactions, such as login requests,
    room creation, and game state synchronization. Serialization of packets
    is managed using boost::serialize, ensuring efficient and consistent
    data format across the network.

3b. Server Connection

    Clients initially connect via TCP, receiving a unique ID for
    identification. This connection phase involves client authentication,
    room assignment, and retrieval of initial game data. The server maintains
    a list of active clients and their statuses.

3c. Network Message Structure and Serialization

    In the R-TYPE server, each network message consists of a structured
    header and a body, serialized using Boost. The header contains the request
    ID, which is an enumeration value as defined in NetworkMessage.hpp.
    This enumeration includes various request types such as ServerAccept,
    ServerDeny, ClientConnect, ClientUpdatePlayerDirection, and more.

    The body of the message, defined in NetworkBody.hpp, is a structured
    payload specific to each request. For instance, the ServerCreatePlayerShip
    structure includes fields like entityNetId, shipName, and pos.
    Serialization of these structures is managed using Boost, allowing complex
    data types like Vector3 to be efficiently serialized and deserialized
    across the network.

    Example of a Network Message:

    message {
        header {
            NetworkMessage id;  // NetworkMessage enumeration
            uint32_t size;      // Size of the message
        }
        MessageBody body;       // Specific structure for the message's body
    }

4. R-TYPE Server UDP Protocol

    For real-time game state updates, the server switches to UDP.
    The 'UDPPacket' structure is used for this purpose, facilitating faster
    communication with minimal overhead. This protocol handles in-game
    actions, player movements, and environmental updates. Like TCP packets,
    UDP packets are serialized using boost::serialize.

4a. Package Structure

    UDP packets are lightweight, containing only essential game state
    information, such as player positions, actions, and game events.
    These packets are sent frequently to ensure a real-time gaming experience.
    The server processes these packets to update the game state and broadcasts
    the updated state to all clients.

4b. Input Communication

    User inputs are processed via UDP. The server interprets key presses and
    mouse movements, mapping them to in-game actions. Key bindings for
    movement and actions are translated into game commands. The server then
    updates the game state based on these inputs, ensuring a responsive
    gaming experience.
