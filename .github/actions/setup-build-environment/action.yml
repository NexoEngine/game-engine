name: 'Setup Build Environment'
description: 'Sets up the build environment with all required dependencies'
inputs:
  compiler:
    description: 'Compiler to use (gcc, msvc, clang)'
    required: true
  compiler-version:
    description: 'Compiler version'
    required: true
  os:
    description: 'Operating system'
    required: true
  generator:
    description: 'CMake generator'
    required: true
  github-token:
    description: 'GitHub token for package access'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Add Ubuntu toolchain repository
      if: ${{ inputs.os == 'ubuntu-latest' && inputs.compiler == 'gcc' }}
      shell: bash
      run: |
        sudo add-apt-repository --yes --update ppa:ubuntu-toolchain-r/test -y
        sudo apt-get update

    - name: Pre-install GCC with cache
      if: ${{ inputs.os == 'ubuntu-latest' && inputs.compiler == 'gcc' }}
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: cpp-13 g++-13 gcc-13 gcc-13-base libgcc-13-dev libhwasan0 \
          libstdc++-13-dev libasan8 libatomic1 libcc1-0 libgcc-13-dev \
          libgcc-s1 libgomp1 libhwasan0 libitm1 liblsan0 libquadmath0 \
          libstdc++-13-dev libstdc++6 libtsan2 libubsan1
        version: 1.0
        execute_install_scripts: true

    - name: Set up GCC
      if: ${{ inputs.compiler == 'gcc' }}
      id: set-up-gcc
      uses: egor-tensin/setup-gcc@v1
      with:
        version: ${{ inputs.compiler-version }}
        platform: x64

    - name: Set up Clang
      if: ${{ inputs.compiler == 'clang' }}
      id: set-up-clang
      uses: egor-tensin/setup-clang@v1
      with:
        version: ${{ inputs.compiler-version }}
        platform: x64
        cygwin: ${{ inputs.os == 'windows-latest' && 1 || 0 }}

    - name: Set up MSVC
      if: ${{ inputs.compiler == 'msvc' }}
      uses: ilammy/msvc-dev-cmd@v1
      with:
        toolset: ${{ inputs.compiler-version }}

    - name: Install required system dependencies for Ubuntu
      if: ${{ inputs.os == 'ubuntu-latest' }}
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: libxrandr-dev libx11-dev
          libxext-dev libxi-dev libgl1-mesa-dev libxinerama-dev
          libxcursor-dev libxcb-render0-dev libxcb-shape0-dev
          libxcb-randr0-dev libxcb-xfixes0-dev libxcb-sync-dev libxcb-shm0-dev
          libxcb-icccm4-dev libxcb-keysyms1-dev libxcb-dri2-0-dev libxcb-dri3-dev
          libxcb-glx0-dev libx11-xcb-dev libglu1-mesa-dev
          libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev
          libegl1-mesa-dev mono-complete libltdl-dev
        version: 1.0
        execute_install_scripts: true

    - name: Install .NET SDK 9.0
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.x'

    - name: Init submodules
      shell: bash
      run: |
        git submodule update --init --recursive

    - name: Fetch all history for all tags and branches of vcpkg
      shell: bash
      run: |
        cd vcpkg
        git fetch --prune --unshallow

    - name: Install latest CMake and Ninja
      uses: lukka/get-cmake@latest
      with:
        cmakeVersion: ~3.30.0

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11

    - name: Add NuGet sources (Windows)
      if: ${{ inputs.os == 'windows-latest' }}
      shell: pwsh
      env:
        USERNAME: NexoEngine
        VCPKG_EXE: ${{ github.workspace }}/vcpkg/vcpkg
        FEED_URL: https://nuget.pkg.github.com/NexoEngine/index.json
      run: |
        .$(${{ env.VCPKG_EXE }} fetch nuget) `
          sources add `
          -Source "${{ env.FEED_URL }}" `
          -StorePasswordInClearText `
          -Name GitHubPackages `
          -UserName "${{ env.USERNAME }}" `
          -Password "${{ inputs.github-token }}"
        .$(${{ env.VCPKG_EXE }} fetch nuget) `
          setapikey "${{ inputs.github-token }}" `
          -Source "${{ env.FEED_URL }}"

    - name: Add NuGet sources (Linux/macOS)
      if: ${{ inputs.os != 'windows-latest' }}
      shell: bash
      env:
        USERNAME: NexoEngine
        VCPKG_EXE: ${{ github.workspace }}/vcpkg/vcpkg
        FEED_URL: https://nuget.pkg.github.com/NexoEngine/index.json
      run: |
        mono `${{ env.VCPKG_EXE }} fetch nuget | tail -n 1` \
          sources add \
          -Source "${{ env.FEED_URL }}" \
          -StorePasswordInClearText \
          -Name GitHubPackages \
          -UserName "${{ env.USERNAME }}" \
          -Password "${{ inputs.github-token }}"
        mono `${{ env.VCPKG_EXE }} fetch nuget | tail -n 1` \
          setapikey "${{ inputs.github-token }}" \
          -Source "${{ env.FEED_URL }}"
