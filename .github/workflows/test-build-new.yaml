name: CI/CD

on:
  workflow_call:
  push:
    branches-ignore:
      - main

env:
  BUILD_TYPE: Debug
  SERV_BIN: rtype_server
  CLIENT_BIN: rtype_client
  VCPKG_COMMIT: 04f7d34c26defd9a54397dcbbb26b1ce3573614d
  VCPKG_DISABLE_METRICS: true

jobs:
  build:
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        platform: [ windows-latest, ubuntu-latest ]
        include:
          - platform: windows-latest
            triplet: x64-windows
          - platform: ubuntu-latest
            triplet: x64-linux-dynamic
    runs-on: ${{ matrix.platform }}
    env:
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
    steps:
      # System dependencies for Linux
      - name: Install system deps for Linux
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt update -y && sudo apt upgrade -y
          sudo apt install -y ninja-build libx11-dev libxrandr-dev libxi-dev libudev-dev libgl1-mesa-dev autoconf libtool libopenal-dev libalut-dev libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev pkg-config
          sudo apt-get install -y software-properties-common lsb-release
          sudo apt-key adv --fetch-keys 'https://apt.kitware.com/keys/kitware-archive-latest.asc'
          sudo apt-add-repository "deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main"
          sudo apt-get update
          sudo apt-get install -y cmake
          cmake --version

    # Checkout code
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      # Set up vcpkg for Linux
      - name: Set up vcpkg (Linux)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          if [ ! -d "vcpkg" ]; then
            git clone https://github.com/microsoft/vcpkg.git
            ./vcpkg/bootstrap-vcpkg.sh
          fi
        shell: bash

      # Set up vcpkg for Windows
      - name: Set up vcpkg (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          if (!(Test-Path "vcpkg")) {
            git clone https://github.com/microsoft/vcpkg.gita
            .\vcpkg\bootstrap-vcpkg.bat
          }
        shell: pwsh

      - name: List contents of the vcpkg directory (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          Get-ChildItem -Path .\vcpkg\ -Force
        shell: pwsh

      - name: Bootstrap vcpkg (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          .\vcpkg\bootstrap-vcpkg.bat
        shell: pwsh

      - name: List contents of the vcpkg directory after bootstrap (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          Get-ChildItem -Path .\vcpkg\ -Force
        shell: pwsh

      - name: Set execution permission for bootstrap script
        if: matrix.platform == 'ubuntu-latest'
        run: chmod +x vcpkg/bootstrap-vcpkg.sh

      # Install dependencies with vcpkg (Windows)
      - name: Install dependencies with vcpkg (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          .\vcpkg\vcpkg install
        shell: pwsh

      # Install dependencies with vcpkg (Linux)
      - name: Install dependencies with vcpkg (Linux)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          echo "No need to install dependencies with vcpkg on Linux"
        shell: bash

      # Install Windows dependencies
      - name: Install Windows dependencies
        if: matrix.platform == 'windows-latest'
        run: choco install ninja cmake

      - name: Configure
        run: |
          if [ "${{ matrix.platform }}" = "windows-latest" ]; then
            VCPKG_TOOLCHAIN_PATH="D:/a/B-CPP-500-STG-5-2-rtype-remi.mergen/B-CPP-500-STG-5-2-rtype-remi.mergen/vcpkg/scripts/buildsystems/vcpkg.cmake"
            SFML_DIR="D:/a/B-CPP-500-STG-5-2-rtype-remi.mergen/B-CPP-500-STG-5-2-rtype-remi.mergen/vcpkg/installed/x64-windows/share/sfml"
            CMAKE_GENERATOR="Visual Studio 17 2022"
          else
            VCPKG_TOOLCHAIN_PATH="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake"
            SFML_DIR="${{ github.workspace }}/vcpkg/installed/${{ matrix.triplet }}/share/sfml"
            CMAKE_GENERATOR="Unix Makefiles"
          fi
          
          cmake -B build && cmake --build build
        working-directory: ${{ github.workspace }}
        shell: bash

      - name: Build
        shell: cmake -P {0}
        run: |
          message(STATUS "Using host CMake version: ${CMAKE_VERSION}")

          execute_process(
            COMMAND cmake -B build && cmake --build build
            RESULT_VARIABLE result
          )
          if (${{ matrix.platform }} STREQUAL "windows-latest")
            cmake_path(SET WORKSPACE_DIR ${{ github.workspace }})
            message(STATUS "Using WORKSPACE_DIR: ${WORKSPACE_DIR}")
            configure_file(${WORKSPACE_DIR}/Debug/r-type_client.exe ${WORKSPACE_DIR} COPYONLY)
            configure_file(${WORKSPACE_DIR}/Debug/r-type_server.exe ${WORKSPACE_DIR} COPYONLY)
          endif()
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status. Failed to build RTYPE project.")
          endif()
        working-directory: ${{ github.workspace }}
